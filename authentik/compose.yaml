services:
  postgresql:
    image: docker.io/library/postgres:16.10-alpine@sha256:029660641a0cfc575b14f336ba448fb8a75fd595d42e1fa316b9fb4378742297
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${DOCKER_DATA_DIR}/authentik/database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
      - POSTGRES_USER=${PG_USER:-authentik}
      - POSTGRES_DB=${PG_DB:-authentik}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED}
      - AUTHENTIK_BOOTSTRAP_PASSWORD=${AUTHENTIK_BOOTSTRAP_PASSWORD}
      - AUTHENTIK_API=${AUTHENTIK_API}
  redis:
    image: docker.io/library/redis:8.2-alpine@sha256:59b6e694653476de2c992937ebe1c64182af4728e54bb49e9b7a6c26614d8933
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping | grep PONG
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${DOCKER_DATA_DIR}/authentik/redis:/data
  server:
    image: ghcr.io/goauthentik/server:2025.10.0@sha256:a283f44eefd68bcfc25cdfbdc0372e6384b60468ca042278bde0a4bd8af4680f
    restart: unless-stopped
    command: server
    networks:
      - default
      - npm
    volumes:
      - ${DOCKER_DATA_DIR}/authentik/media:/media
      - ${DOCKER_DATA_DIR}/authentik/custom-templates:/templates
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED}
      - AUTHENTIK_BOOTSTRAP_PASSWORD=${AUTHENTIK_BOOTSTRAP_PASSWORD}
      - AUTHENTIK_API=${AUTHENTIK_API}
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
    ports:
      - ${COMPOSE_PORT_HTTP:-9000}:9000
      - ${COMPOSE_PORT_HTTPS:-9443}:9443
    depends_on:
      - postgresql
      - redis
    labels:
      # Homepage
      - homepage.group=Infra
      - homepage.name=Authentik
      - homepage.icon=authentik.png
      - homepage.href=https://auth.${DOMAIN}/
      - homepage.description=IAM
      - homepage.widget.type=authentik
      - homepage.widget.url=${AUTHENTIK_INTERNAL_URL}
      - homepage.widget.key=${AUTHENTIK_API}
      - homepage.widget.version=2

      # Traefik
      - traefik.enable=true
      - traefik.docker.network=npm
      - traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.tls=true
      - traefik.http.routers.authentik.service=authentik
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      - traefik.http.services.authentik.loadbalancer.server.scheme=http
      - traefik.http.routers.authentik.middlewares=sec-headers@docker

  worker:
    image: ghcr.io/goauthentik/server:2025.10.0@sha256:a283f44eefd68bcfc25cdfbdc0372e6384b60468ca042278bde0a4bd8af4680f
    restart: unless-stopped
    command: worker
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DATA_DIR}/authentik/media:/media
      - ${DOCKER_DATA_DIR}/authentik/certs:/certs
      - ${DOCKER_DATA_DIR}/authentik/custom-templates:/templates
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED}
      - AUTHENTIK_BOOTSTRAP_PASSWORD=${AUTHENTIK_BOOTSTRAP_PASSWORD}
      - AUTHENTIK_API=${AUTHENTIK_API}
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
volumes:
  database:
    driver: local
  redis:
    driver: local
networks:
  npm:
    external: true