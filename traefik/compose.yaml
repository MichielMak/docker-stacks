networks:
  npm:
    external: true

services:
  traefik:
    image: traefik:v3.5.4@sha256:fa528d4565c8c279328c12d466325ee0f65804a75bcdbef737290664ad971d68
    container_name: traefik
    restart: unless-stopped
    networks:
      - npm
    ports:
      - 80:80
      - 443:443
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}   # Cloudflare token (DNS:Edit + Zone:Read)
      DOMAIN: ${DOMAIN}
      HASS_IP: ${HASS_IP}
      UNIFI_IP: ${UNIFI_IP}
      PVE_IP: ${PVE_IP}
      TRUENAS_IP: ${TRUENAS_IP}
      PIHOLE2_IP: ${PIHOLE2_IP}
    command:
      # Providers
      - --providers.docker=true
      - --providers.file.directory=/dynamic
      - --providers.file.watch=true
      - --providers.docker.exposedbydefault=false

      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443

      # Let's Encrypt (ACME) via DNS-01 (wildcard)
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare

      # Gebruik één wildcard cert voor ${DOMAIN} en *.${DOMAIN}
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}

      # Dashboard
      - --api.dashboard=true
      - --api.insecure=false

      # Logging
      - --log.level=INFO
      - --accesslog=true
      - --accesslog.fields.defaultmode=keep
      - --accesslog.fields.names.ClientUsername=drop

      # Security / performance
#      - --experimental.http3=true
      - --serversTransport.insecureSkipVerify=false
    labels:
      traefik.enable: "true"

      # Dashboard router
      traefik.http.routers.traefik.rule: Host(`${TRAEFIK_HOST}`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.service: api@internal

      # Security headers (herbruikbare middleware)
      traefik.http.middlewares.sec-headers.headers.stsSeconds: 31536000
      traefik.http.middlewares.sec-headers.headers.stsIncludeSubdomains: "true"
      traefik.http.middlewares.sec-headers.headers.stsPreload: "true"
      traefik.http.middlewares.sec-headers.headers.customFrameOptionsValue: SAMEORIGIN
      traefik.http.middlewares.sec-headers.headers.contentTypeNosniff: "true"
      traefik.http.middlewares.sec-headers.headers.referrerPolicy: no-referrer-when-downgrade
      traefik.http.middlewares.sec-headers.headers.permissionsPolicy: geolocation=(), microphone=(), camera=()


      # Optioneel: BasicAuth of ForwardAuth (Authentik)
      # traefik.http.middlewares.dash-auth.basicauth.users: ${TRAEFIK_DASH_USERS}
      # traefik.http.routers.traefik.middlewares: dash-auth,sec-headers@docker

      # Authentik ForwardAuth (domain-level)
      traefik.http.middlewares.authentik-forwardauth.forwardauth.address: http://server:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik-forwardauth.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authentik-forwardauth.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_DATA_DIR}/traefik/letsencrypt:/letsencrypt
      - ./dynamic:/dynamic:ro